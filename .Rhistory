View(forwardback)
pi.mar <- rep(1/N,N)
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
Baum.Welch(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec))
trace('forwardback', edit = T)
View(forwardback)
View(Mstep.norm)
maxiter <- 24
N <- 4
Ti <- length(obs.vec)
epsilon <- 1e-6
pi.mar <- rep(1/N,N)
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
for (iter in 1:maxiter){
FB <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
LL <- FB$Loglikelihood
log.lik.iter <- c(log.lik.iter, LL)
diff <- LL - oldLL
cat('iter=', iter, '\n')
cat('LL=', round(LL, 10), '\n')
cat('diff=', diff, '\n')
if(abs(diff)<epsilon){
stop('Algorithm converges!')
}
gamma.log <- FB$alphalog+FB$betalog-LL
gamma.m <- exp(gamma.log)
AH <- FB$alphahat
BH <- FB$betahat
DM <- FB$density_m
mean.vec <- apply(gamma.m, 2, function(x) sum(x*obs.vec)/sum(x))
sd.vec <- sqrt(apply((matrix(obs.vec, nrow = Ti, ncol = N) - matrix(mean.vec,nrow = Ti, ncol = N, byrow = TRUE))^2 * gamma.m, MARGIN = 2,FUN = sum)/apply(gamma.m, MARGIN = 2, FUN = sum))
pi.mar <- gamma.m[1,]
tran.m <- (t(AH[1:Ti-1,])%*%(DM[2:Ti,]*BH[2:Ti,]))*tran.m #maybe a parenthesis is redundant.
tran.m <- t(scale(t(tran.m),center = F, scale = colSums(t(tran.m))))
oldLL <- LL
}
mean.vec
sd.vec
tran.m
pi.mar
View(Estep)
View(Baum.Welch)
View(forwardback)
library(HiddenMarkov)
View(forwardback)
iter = 1
N <- 4
Ti <- length(obs.vec)
maxiter <- 500
epsilon <- 1e-6
pi.mar <- as.double(rep(1/N,N))
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- as.double(c(2,3,9,10))
sd.vec <- as.double(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
FB <- ForwardBack2(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB2.R', echo=TRUE)
iter = 1
N <- 4
Ti <- length(obs.vec)
maxiter <- 500
epsilon <- 1e-6
pi.mar <- as.double(rep(1/N,N))
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- as.double(c(2,3,9,10))
sd.vec <- as.double(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
FB <- ForwardBack2(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
head(FB$alphalog)
iter = 1
N <- 4
Ti <- length(obs.vec)
maxiter <- 500
epsilon <- 1e-6
pi.mar <- as.double(rep(1/N,N))
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- as.double(c(2,3,9,10))
sd.vec <- as.double(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
FB_1 <- ForwardBack2(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
head(FB_1$alphalog)
head(FB_1$alphalog)
head(FB_1$alphalog)
head(FB_1$alpha_hat)
head(FB_1$alphalog)
head(FB_1$alpha_hat)
head(FB_1$beta_hat)
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB2.R', echo=TRUE)
iter = 1
N <- 4
Ti <- length(obs.vec)
maxiter <- 500
epsilon <- 1e-6
pi.mar <- as.double(rep(1/N,N))
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- as.double(c(2,3,9,10))
sd.vec <- as.double(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
FB_1 <- ForwardBack2(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
iter = 1
N <- 4
Ti <- length(obs.vec)
maxiter <- 500
epsilon <- 1e-6
pi.mar <- as.double(rep(1/N,N))
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- as.double(c(2,3,9,10))
sd.vec <- as.double(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
FB_1 <- ForwardBack2(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB2.R', echo=TRUE)
iter = 1
N <- 4
Ti <- length(obs.vec)
maxiter <- 500
epsilon <- 1e-6
pi.mar <- as.double(rep(1/N,N))
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- as.double(c(2,3,9,10))
sd.vec <- as.double(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
FB_1 <- ForwardBack2(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
head(FB_1$alphalog)
head(FB_1$alpha_hat)
head(FB_1$beta_hat)
head(FB_1$alphalog)
head(FB_1$alpha_hat)
head(FB_1$beta_hat)
FB_1$ct
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB2.R', echo=TRUE)
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB2.R', echo=TRUE)
iter = 1
N <- 4
Ti <- length(obs.vec)
maxiter <- 500
epsilon <- 1e-6
pi.mar <- as.double(rep(1/N,N))
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- as.double(c(2,3,9,10))
sd.vec <- as.double(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
FB_1 <- ForwardBack2(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB2.R', echo=TRUE)
iter = 1
N <- 4
Ti <- length(obs.vec)
maxiter <- 500
epsilon <- 1e-6
pi.mar <- as.double(rep(1/N,N))
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- as.double(c(2,3,9,10))
sd.vec <- as.double(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
FB_1 <- ForwardBack2(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
head(FB_1$alphalog)
head(FB_1$alpha_hat)
head(FB_1$beta_hat)
FB_1$ct
FB_1$test[1:20]
# backward
beta_b_h <- as.double(rep(1, N))*ct_seq[Ti]
beta.hat <- matrix(rep(NA, N*Ti), nrow = Ti)
head(FB_1$alphalog)
head(FB_1$alpha_hat)
head(FB_1$beta_hat)
ct_seq = FB_1$ct
FB_1$test[1:20]
# backward
beta_b_h <- as.double(rep(1, N))*ct_seq[Ti]
beta.hat <- matrix(rep(NA, N*Ti), nrow = Ti)
beta.hat[Ti,] <- beta_b_h
# test
test <- list()
test[[Ti]] <- beta_b_h
beta_b_h <- tran.m%*%(density.m[i+1,]*beta_b_h)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB2.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?product
??product
beta_log = matrix(rep(NA, Ti*N), ncol = N)
for (i in Ti:1){
beta_log[i] = FB_1$beta_hat[i]/prod(ct_seq[Ti+1-i:Ti])
}
beta_log <- log(beta_log)
head(beta_log)
beta_log = matrix(rep(NA, Ti*N), ncol = N)
for (i in Ti:1){
beta_log[i,] = FB_1$beta_hat[i]/prod(ct_seq[Ti+1-i:Ti])
}
beta_log <- log(beta_log)
head(beta_log)
head(FB_1$alphalog)
head(FB_1$alpha_hat)
head(FB_1$beta_hat)
ct_seq = FB_1$ct
# backward
beta_b_h <- as.double(rep(1, N))*ct_seq[Ti]
beta.hat <- matrix(rep(NA, N*Ti), nrow = Ti)
beta.hat[Ti,] <- beta_b_h
# test
test <- list()
test[[Ti]] <- beta_b_h
beta_b_h
beta_b_h <- density.m[Ti,]%*%tran.m*beta_b_h
beta_b_h
tran.m
head(density.m[Ti,]%*%tran.m)
?apply
head(gamma.m)
head(sapply(1:Ti, function(x) gamma.m[x,]/ct_seq[x]))
x = sapply(1:Ti, function(x) gamma.m[x,]/ct_seq[x])
dim(x)
x = t(sapply(1:Ti, function(x) gamma.m[x,]/ct_seq[x]))
dim(x)
x = t(sapply(1:Ti, function(x) gamma.m[x,]/ct_seq[x]))
dim(x)
head(x)
head(gamma.m)
x = t(sapply(1:Ti, function(x) gamma.m[x,]/ct_seq[x]))
dim(x)
head(x)
head(gamma.m)
ct_seq = 1:Ti
x = t(sapply(1:Ti, function(x) gamma.m[x,]/ct_seq[x]))
dim(x)
head(x)
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB2.R', echo=TRUE)
source('~/My/math/STAT/Courses/AMS 597/597_Project/re-estimation-lambda3.R', echo=TRUE)
maxiter <- 500
N <- 4
Ti <- length(obs.vec)
epsilon <- 1e-3
pi.mar <- rep(1/N,N)
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
FB <- ForwardBack2(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
LL <- FB$Loglikelihood
log.lik.iter <- c(log.lik.iter, LL)
diff <- LL - oldLL
cat('iter=', iter, '\n')
cat('LL=', round(LL, 10), '\n')
cat('diff=', diff, '\n')
if(abs(diff)<epsilon){
stop('Algorithm converges!')
}
gamma.log <- FB$alphalog+FB$betalog-LL
gamma.m <- exp(gamma.log)
AH <- FB$alphahat
BH <- FB$betahat
DM <- FB$density_m
ct_vec <-FB$ct
gamma.m <- AH*BH
gamma.m <- t(sapply(1:Ti, function(x) gamma.m[x,]/ct_vec[x]))
dim(gamma.m)
dim(AH)
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB2.R', echo=TRUE)
maxiter <- 500
N <- 4
Ti <- length(obs.vec)
epsilon <- 1e-3
pi.mar <- rep(1/N,N)
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
FB <- ForwardBack2(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
LL <- FB$Loglikelihood
log.lik.iter <- c(log.lik.iter, LL)
diff <- LL - oldLL
cat('iter=', iter, '\n')
cat('LL=', round(LL, 10), '\n')
cat('diff=', diff, '\n')
if(abs(diff)<epsilon){
stop('Algorithm converges!')
}
gamma.log <- FB$alphalog+FB$betalog-LL
gamma.m <- exp(gamma.log)
AH <- FB$alphahat
BH <- FB$betahat
DM <- FB$density_m
ct_vec <-FB$ct
gamma.m <- AH*BH
gamma.m <- t(sapply(1:Ti, function(x) gamma.m[x,]/ct_vec[x]))
mean.vec <- apply(gamma.m, 2, function(x) sum(x*obs.vec)/sum(x))
sd.vec <- sqrt(apply((matrix(obs.vec, nrow = Ti, ncol = N) - matrix(mean.vec,nrow = Ti, ncol = N, byrow = TRUE))^2 * gamma.m, MARGIN = 2,FUN = sum)/apply(gamma.m, MARGIN = 2, FUN = sum))
pi.mar <- gamma.m[1,]
tran.m <- (t(AH[1:Ti-1,])%*%(DM[2:Ti,]*BH[2:Ti,]))*tran.m #maybe a parenthesis is redundant.
tran.m <- t(scale(t(tran.m),center = F, scale = colSums(t(tran.m))))
oldLL <- LL
#gamma revision
maxiter <- 500
N <- 4
Ti <- length(obs.vec)
epsilon <- 1e-3
pi.mar <- rep(1/N,N)
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
for (iter in 1:maxiter){
FB <- ForwardBack2(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
LL <- FB$Loglikelihood
log.lik.iter <- c(log.lik.iter, LL)
diff <- LL - oldLL
cat('iter=', iter, '\n')
cat('LL=', round(LL, 10), '\n')
cat('diff=', diff, '\n')
if(abs(diff)<epsilon){
stop('Algorithm converges!')
}
gamma.log <- FB$alphalog+FB$betalog-LL
gamma.m <- exp(gamma.log)
AH <- FB$alphahat
BH <- FB$betahat
DM <- FB$density_m
ct_vec <-FB$ct
gamma.m <- AH*BH
gamma.m <- t(sapply(1:Ti, function(x) gamma.m[x,]/ct_vec[x]))
mean.vec <- apply(gamma.m, 2, function(x) sum(x*obs.vec)/sum(x))
sd.vec <- sqrt(apply((matrix(obs.vec, nrow = Ti, ncol = N) - matrix(mean.vec,nrow = Ti, ncol = N, byrow = TRUE))^2 * gamma.m, MARGIN = 2,FUN = sum)/apply(gamma.m, MARGIN = 2, FUN = sum))
pi.mar <- gamma.m[1,]
tran.m <- (t(AH[1:Ti-1,])%*%(DM[2:Ti,]*BH[2:Ti,]))*tran.m #maybe a parenthesis is redundant.
tran.m <- t(scale(t(tran.m),center = F, scale = colSums(t(tran.m))))
oldLL <- LL
}
plot(log.lik.iter)
trace('BaumWelch', edit = T)
trace('Baum.Welch', edit = T)
pi.mar <- rep(1/N,N)
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
Baum.Welch(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec))
pi.mar <- rep(1/N,N)
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
BM = Baum.Welch(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec))
plot(BM$likelihood)
View(Viterbihmm)
View(Viterbi)
View(Viterbihmm)
BM$Pi
BM$Pi
BM$pm
BM$Pi
BM$pm
Viterbihmm(obs.vec, BM$Pi, BM$delta, 'norm', BM$pm)
source('~/My/math/STAT/Courses/AMS 597/597_Project/Viterbi.R', echo=TRUE)
Vit_hmm(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
plot(log.lik.iter)
tran.m
#gamma revision
maxiter <- 500
N <- 4
Ti <- length(obs.vec)
epsilon <- 1e-3
pi.mar <- rep(1/N,N)
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
for (iter in 1:maxiter){
FB <- ForwardBack2(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
LL <- FB$Loglikelihood
log.lik.iter <- c(log.lik.iter, LL)
diff <- LL - oldLL
cat('iter=', iter, '\n')
cat('LL=', round(LL, 10), '\n')
cat('diff=', diff, '\n')
if(abs(diff)<epsilon){
stop('Algorithm converges!')
}
gamma.log <- FB$alphalog+FB$betalog-LL
gamma.m <- exp(gamma.log)
AH <- FB$alphahat
BH <- FB$betahat
DM <- FB$density_m
ct_vec <-FB$ct
gamma.m <- AH*BH
gamma.m <- t(sapply(1:Ti, function(x) gamma.m[x,]/ct_vec[x]))
mean.vec <- apply(gamma.m, 2, function(x) sum(x*obs.vec)/sum(x))
sd.vec <- sqrt(apply((matrix(obs.vec, nrow = Ti, ncol = N) - matrix(mean.vec,nrow = Ti, ncol = N, byrow = TRUE))^2 * gamma.m, MARGIN = 2,FUN = sum)/apply(gamma.m, MARGIN = 2, FUN = sum))
pi.mar <- gamma.m[1,]
tran.m <- (t(AH[1:Ti-1,])%*%(DM[2:Ti,]*BH[2:Ti,]))*tran.m #maybe a parenthesis is redundant.
tran.m <- t(scale(t(tran.m),center = F, scale = colSums(t(tran.m))))
oldLL <- LL
}
tran.m
tran.m
mean.vec
tran.m
mean.vec
sd.vec
Vit_hmm(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
N <- nrow(tran.m)
Ti <- length(obs.vec)
density.m <- matrix(rep(as.double(0), Ti*N), nrow = Ti, ncol = N)
for (i in 1:Ti){
density.m[i,] <- mapply(
dnorm, 'x' = obs.vec[i], 'mean' = mean.vec, 'sd' = sd.vec,'log' = T, SIMPLIFY = T)
}
tran.m.log <- log(tran.m)
delta_log <- matrix(rep(NA, N*Ti), ncol = N)
delta_log[1,] <- log(pi.mar) + density.m[1,]
#keep track of states
bt <- rep(NA, Ti)
delta_ind <- matrix(rep(NA, (Ti-1)*N), ncol = N)
for (i in 2:Ti){
delta_max <- sapply(1:N, function(x) tran.m[,x]+delta_log[i-1, x]+density.m[i,x])
delta_ind[i-1, ] <- apply(delta_max, 1, which.max)
delta_log[i,] <- apply(delta_max,1,max)
}
bt[Ti] <- which.max(delta_log[Ti, ])
for (i in Ti-1:1) {
bt[i] <- delta_ind[i,bt[i+1]]
}
head(delta_ind)
head(delta_ind)
dim(delta_ind)
head(delta_ind)
dim(delta_ind)
sum(as.numeric(is.na(delta.ind)))
head(delta_ind)
dim(delta_ind)
sum(as.numeric(is.na(delta_ind)))
head(delta_ind)
dim(delta_ind)
sum(as.numeric(is.na(delta_ind)))
head(delta_log)
N <- nrow(tran.m)
Ti <- length(obs.vec)
density.m <- matrix(rep(as.double(0), Ti*N), nrow = Ti, ncol = N)
for (i in 1:Ti){
density.m[i,] <- mapply(
dnorm, 'x' = obs.vec[i], 'mean' = mean.vec, 'sd' = sd.vec,'log' = T, SIMPLIFY = T)
}
tran.m.log <- log(tran.m)
delta_log <- matrix(rep(NA, N*Ti), ncol = N)
delta_log[1,] <- log(pi.mar) + density.m[1,]
#keep track of states
bt <- rep(NA, Ti)
delta_ind <- matrix(rep(NA, (Ti-1)*N), ncol = N)
for (i in 2:Ti){
delta_max <- sapply(1:N, function(x) tran.m[,x]+delta_log[i-1, x]+density.m[i,x])
delta_ind[i-1, ] <- apply(delta_max, 1, which.max)
delta_log[i,] <- apply(delta_max,1,max)
}
bt[Ti] <- which.max(delta_log[Ti, ])
for (i in Ti-1:1) {
bt[i] <- delta_ind[i,bt[i+1]]
}
bt
N <- nrow(tran.m)
Ti <- length(obs.vec)
density.m <- matrix(rep(as.double(0), Ti*N), nrow = Ti, ncol = N)
for (i in 1:Ti){
density.m[i,] <- mapply(
dnorm, 'x' = obs.vec[i], 'mean' = mean.vec, 'sd' = sd.vec,'log' = T, SIMPLIFY = T)
}
tran.m.log <- log(tran.m)
delta_log <- matrix(rep(NA, N*Ti), ncol = N)
delta_log[1,] <- log(pi.mar) + density.m[1,]
#keep track of states
bt <- rep(NA, Ti)
delta_ind <- matrix(rep(NA, (Ti-1)*N), ncol = N)
for (i in 2:Ti){
delta_max <- sapply(1:N, function(x) tran.m[,x]+delta_log[i-1, x]+density.m[i,x])
delta_ind[i-1, ] <- apply(delta_max, 1, which.max)
delta_log[i,] <- apply(delta_max,1,max)
}
bt[Ti] <- which.max(delta_log[Ti, ])
for (i in (Ti-1):1) {
bt[i] <- delta_ind[i,bt[i+1]]
}
bt
bt
length(bt)
Viterbihmm(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec))
getwd()
setwd("/Users/changche/My/math/STAT/Courses/AMS 597/597_Project")
