a <- runif(i,min = 0,max = 1)
pi.mar <- a/sum(a)
##simulate the mean and standard deviation
mean.vec<-rep(NA,i)
sd.vec <- rep(NA,i)
for(m in 1:i){
sd.vec[m]<-sqrt(rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2))
mean.vec[m]<-rnorm(1,sm,sd.vec[m]/n)
}
#cat(sd.vec, '\n')
#cat(mean.vec,'\n')
#cat(tran.m,'\n')
#cat(epsilon, '\n')
BM<-BaumWelch_hmm(obs.vec, pi.mar, tran.m, mean.vec, sd.vec, maxiter, epsilon, silence = T)
L <- BM$LL
len <- length(BM$iter_LL)
cat(L,'\n')
cat(len,'\n')
}
source('~/Downloads/BIC.R', echo=TRUE)
library(MASS)
hmm_BIC(obs.vec, initials = 5,maxiter =  500, epsilon = 10^(-6))
source('~/My/math/STAT/Courses/AMS 597/597_Project/BaumWelch.R', echo=TRUE)
library(MASS)
hmm_BIC(obs.vec, initials = 5,maxiter =  500, epsilon = 10^(-6))
library(MASS)
hmm_BIC(obs.vec, initials = 5,maxiter =  100, epsilon = 10^(-1))
source('~/Downloads/BIC.R', echo=TRUE)
library(MASS)
hmm_BIC(obs.vec, initials = 5,maxiter =  100, epsilon = 10^(-1))
library(MASS)
hmm_BIC(obs.vec, initials = 5,maxiter =  100, epsilon = 10^(-1))
source('~/Downloads/BIC.R', echo=TRUE)
library(MASS)
hmm_BIC(obs.vec, initials = 5,maxiter =  100, epsilon = 10^(-1))
?max
source('~/Downloads/BIC.R', echo=TRUE)
library(MASS)
hmm_BIC(obs.vec, initials = 5,maxiter =  100, epsilon = 10^(-1))
rm(list = ls())
set.seed(1234)
n_states = 5
n_time = 2000
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2, 1/2, 0, 0, 0,
1/3, 1/3, 1/3, 0, 0,
0, 1/3, 1/3, 1/3, 0,
0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 1/2, 1/2), byrow=TRUE, nrow=5)
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
listofnormals[[5]] = list(1, 'mean' = 10, 'sd' = 4 )
ini.vec = c(1, 0, 0, 0,0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
obs.states
tran.m.true
source('~/Downloads/BIC.R', echo=TRUE)
library(MASS)
hmm_BIC(obs.vec, initials = 5,maxiter =  100, epsilon = 10^(-1))
source('~/Downloads/BIC.R', echo=TRUE)
hmm_BIC(obs.vec, initials = 5,maxiter =  100, epsilon = 10^(-1))
source('~/My/math/STAT/Courses/AMS 597/597_Project/BaumWelch.R', echo=TRUE)
hmm_BIC(obs.vec, initials = 5,maxiter =  100, epsilon = 10^(-1))
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB2.R', echo=TRUE)
hmm_BIC(obs.vec, initials = 5,maxiter =  100, epsilon = 10^(-1))
hmm_BIC(obs.vec, initials = 20,maxiter =  100, epsilon = 10^(-1))
hmm_BIC(obs.vec, initials = 20,maxiter =  100, epsilon = 10^(-3))
?Baum.Welch.mmpp
View(Baum.Welch.mmpp)
View(BaumWelch)
View(Baum.Welch.mmpp)
install.packages('HMM597final')
install.packages('devtools')
library(devtools)
devtools::install_github("klutometis/roxygen")
library(roxygen2)
install.packages("~/Downloads/hmm_0.0.0.9000.tar.gz", repos = NULL, type = "source")
rm(list = ls())
library(HMM597final)
library(hmm)
detach("package:HiddenMarkov", unload=TRUE)
source('~/My/math/STAT/Courses/AMS 597/597_Project/BIC.R', echo=TRUE)
set.seed(1234)
n_states = 5
n_time = 200
x1 = list()
for (i in 1:n_states) {
x <- runif(n_states)
x1[[i]] <- x/sum(x)
}
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2,1/2,0,0,0,
0,1/2,1/2,0,0,
0,0,1/2,1/2,0,
0,0,0,1/2,1/2,
0,0,0,0,1), ncol = n_states, byrow = T)
#
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
listofnormals[[5]] = list(1, 'mean' = 10, 'sd' = 2 )
ini.vec = c(1, 0, 0, 0,0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
obs.states
tran.m.true
hmm_BIC(obs.vec, 10)
source('~/My/math/STAT/Courses/AMS 597/597_Project/BaumWelch_v2.R', echo=TRUE)
source('~/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/77b42fe7211f759ac33156ea93c6b19e/Message/MessageTemp/26312da578e716c977a1892d2819d43c/File/Viterbi_v2.R', echo=TRUE)
source('~/Library/Containers/com.tencent.xinWeChat/Data/Library/Application Support/com.tencent.xinWeChat/2.0b4.0.9/77b42fe7211f759ac33156ea93c6b19e/Message/MessageTemp/26312da578e716c977a1892d2819d43c/File/FB2_v2.R', echo=TRUE)
hmm_BIC(obs.vec, 10)
sm <- mean(obs.vec)
sv <- var(obs.vec)
sv <- var(obs.vec)
sm <- mean(obs.vec)
sv <- var(obs.vec)
sm
sv
sqrt(rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2))
n = length(obs.vec)
sqrt(rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2))
sm <- mean(obs.vec)
sv <- var(obs.vec)
n = length(obs.vec)
sm
sv
sqrt(rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, scale = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, scale = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, scale = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, scale = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, scale = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, scale = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, scale = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, scale = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, scale = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, scale = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, scale = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, scale = (n-1)*sv/2))
sqrt(rinvgamma(1,shape = (n-1)/2, scale = (n-1)*sv/2))
sm <- mean(obs.vec)
sv <- var(obs.vec)
n = length(obs.vec)
n
sm
sv
?invgamma
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, scale = (n-1)*sv/2)
?rnorm
set.seed(1234)
n_states = 5
n_time = 2000
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2, 1/2, 0, 0, 0,
1/3, 1/3, 1/3, 0, 0,
0, 1/3, 1/3, 1/3, 0,
0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 1/2, 1/2), byrow=TRUE, nrow=5)
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
listofnormals[[5]] = list(1, 'mean' = 10, 'sd' = 4 )
ini.vec = c(1, 0, 0, 0,0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
obs.states
tran.m.true
sm <- mean(obs.vec)
sv <- var(obs.vec)
n = length(obs.vec)
n
sm
sv
rinvgamma(1,shape = (n-1)/2, scale = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
hmm_BIC(obs.vec, 10)
set.seed(1234)
n_states = 4
n_time = 2000
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(runif(n*n), byrow=TRUE, nrow=n_states)
tran.m.true <- apply(tran.m.true, MARGIN = 1, function(x) x/sum(x))
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
#listofnormals[[5]] = list(1, 'mean' = 10, 'sd' = 4 )
ini.vec = c(1, 0, 0, 0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
set.seed(1234)
n_states = 4
n_time = 2000
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(runif(n_states*n_states), byrow=TRUE, nrow=n_states)
tran.m.true <- apply(tran.m.true, MARGIN = 1, function(x) x/sum(x))
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
#listofnormals[[5]] = list(1, 'mean' = 10, 'sd' = 4 )
ini.vec = c(1, 0, 0, 0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
obs.states
tran.m.true
hmm_BIC(obs.vec, 10)
source('~/My/math/STAT/Courses/AMS 597/597_Project/BIC.R', echo=TRUE)
hmm_BIC(obs.vec, 10)
source('~/My/math/STAT/Courses/AMS 597/597_Project/BIC.R', echo=TRUE)
hmm_BIC(obs.vec, 10)
source('~/My/math/STAT/Courses/AMS 597/597_Project/BIC.R', echo=TRUE)
hmm_BIC(obs.vec, 10)
set.seed(1234)
n_states = 5
n_time = 2000
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2, 1/2, 0, 0, 0,
1/3, 1/3, 1/3, 0, 0,
0, 1/3, 1/3, 1/3, 0,
0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 1/2, 1/2), byrow=TRUE, nrow=5)
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
listofnormals[[5]] = list(1, 'mean' = 10, 'sd' = 4 )
ini.vec = c(1, 0, 0, 0,0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
obs.states
tran.m.true
hmm_BIC(obs.vec, 10)
source('~/My/math/STAT/Courses/AMS 597/597_Project/BIC.R', echo=TRUE)
hmm_BIC(obs.vec, 10)
sm <- mean(obs.vec)
sv <- var(obs.vec)
n = length(obs.vec)
n
sm
sv
rinvgamma(1,shape = (n-1)/2, scale = (n-1)*sv/2)
rinvgamma(1,shape = (n-1)/2, rate = (n-1)*sv/2)
hmm_BIC(obs.vec, 100)
?mean
source('~/My/math/STAT/Courses/AMS 597/597_Project/BIC.R', echo=TRUE)
hmm_BIC(obs.vec, 100)
set.seed(1234)
n_states = 5
n_time = 2000
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2, 1/2, 0, 0, 0,
1/3, 1/3, 1/3, 0, 0,
0, 1/3, 1/3, 1/3, 0,
0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 1/2, 1/2), byrow=TRUE, nrow=5)
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 1 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 1 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 1 )
listofnormals[[5]] = list(1, 'mean' = 10, 'sd' = 1 )
ini.vec = c(1, 0, 0, 0,0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
obs.states
tran.m.true
source('~/My/math/STAT/Courses/AMS 597/597_Project/BIC.R', echo=TRUE)
hmm_BIC(obs.vec, 100)
hmm_BIC(obs.vec, 10)
source('~/My/math/STAT/Courses/AMS 597/597_Project/BIC.R', echo=TRUE)
hmm_BIC(obs.vec, 10)
hmm_BIC(obs.vec, 10)
set.seed(1234)
n_states = 5
n_time = 2000
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2, 1/2, 0, 0, 0,
1/3, 1/3, 1/3, 0, 0,
0, 1/3, 1/3, 1/3, 0,
0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 1/2, 1/2), byrow=TRUE, nrow=5)
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 1 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 1 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 1 )
listofnormals[[5]] = list(1, 'mean' = 10, 'sd' = 1 )
ini.vec = c(1, 0, 0, 0,0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
obs.states
tran.m.true
hmm_BIC(obs.vec, 100)
remove.packages("hmm")
install.packages("~/My/math/STAT/Courses/hmm.tar.gz", repos = NULL, type = "source")
library(hmm)
detach("package:hmm", unload=TRUE)
remove.packages("hmm")
install.packages("~/My/math/STAT/Courses/hmm.tar.gz", repos = NULL, type = "source")
library("hmm", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
rm(list = ls())
library(hmm)
detach("package:hmm", unload=TRUE)
remove.packages("hmm")
install.packages("~/My/math/STAT/Courses/hmm.tar.gz", repos = NULL, type = "source")
library("hmm", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
?BIC_hmm
?BIC_hmm
library("hmm", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
?BIC_hmm
remove.packages("hmm")
install.packages("~/My/math/STAT/Courses/hmm.tar.gz", repos = NULL, type = "source")
library("hmm", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
?BIC_hmm
?Vit_hmm
detach("package:hmm", unload=TRUE)
remove.packages("hmm")
install.packages("~/My/math/STAT/Courses/hmm.tar.gz", repos = NULL, type = "source")
library("hmm", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
?BIC_hmm
?BaumWelch_hmm
?ForwardBack2
?Vit_hmm
detach("package:hmm", unload=TRUE)
remove.packages("hmm")
install.packages("~/My/math/STAT/Courses/hmm.tar.gz", repos = NULL, type = "source")
library(hmm)
?BaumWelch_hmm
?BIC_hmm
?ForwardBack2
?Vit_hmm
?BIC_hmm
maxiter <- 500
N <- 5
Ti <- length(obs.vec)
set.seed(1234)
n_states = 4
n_time = 2000
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(runif(n_states*n_states), byrow=TRUE, nrow=n_states)
tran.m.true <- apply(tran.m.true, MARGIN = 1, function(x) x/sum(x))
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
#listofnormals[[5]] = list(1, 'mean' = 10, 'sd' = 4 )
ini.vec = c(1, 0, 0, 0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
obs.states
tran.m.true
maxiter <- 500
N <- 5
Ti <- length(obs.vec)
epsilon <- 1e-5
pi.mar <- rep(1/N,N)
mean.vec <- c(2,3,9,10,12)
sd.vec <- c(1.5,2,3,4,2)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM1 <- BaumWelch_hmm(obs.vec, pi.mar, tran.m, mean.vec, sd.vec, maxiter, epsilon))
plot(BM1$iter_LL)
plot(BM1$iter_LL)
library(HiddenMarkov)
pi.mar <- rep(1/N,N)
mean.vec <- rev(c(2,3,9,10))
sd.vec <- rev(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM2 <- Baum.Welch(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec),maxiter = 2000))
maxiter <- 2000
N <- 4
Ti <- length(obs.vec)
epsilon <- 1e-5
pi.mar <- rep(1/N,N)
mean.vec <- rev(c(2,3,9,10))
sd.vec <- rev(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM1 <- BaumWelch_hmm(obs.vec, pi.mar, tran.m, mean.vec, sd.vec, maxiter, epsilon))
View(BM1)
plot(BM1$iter_LL)
library(HiddenMarkov)
pi.mar <- rep(1/N,N)
mean.vec <- rev(c(2,3,9,10))
sd.vec <- rev(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM2 <- Baum.Welch(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec),maxiter = 2000))
plot(BM2$LL_iter)
BM1$tran_m
BM2$Pi
BM1$pi_mar
BM2$delta
BM1$mean
BM1$sd
BM2$pm
system.time(VH1 <- Vit_hmm(obs.vec, BM1$pi_mar, BM1$tran_m, BM1$mean, BM1$sd))
VH1
system.time(VH2 <- Viterbihmm(obs.vec, BM1$tran_m, BM1$pi_mar, 'norm', list(mean = BM1$mean, BM1$sd)))
VH2
?Vit_hmm
detach("package:hmm", unload=TRUE)
remove.packages("hmm")
install.packages("~/My/math/STAT/Courses/hmm.tar.gz", repos = NULL, type = "source")
install.packages("~/My/math/STAT/Courses/hmm.tar.gz", repos = NULL, type = "source")
library(hmm)
BaumWelch_hmm
View(BaumWelch_hmm)
