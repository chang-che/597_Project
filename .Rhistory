}
bt
source('~/My/math/STAT/Courses/AMS 597/597_Project/Viterbi.R', echo=TRUE)
system.time(VH1 <- Vit_hmm(obs.vec, BM1$pi_mar, BM1$tran_m, BM1$mean, BM1$sd))
VH1
BM1$pi_mar
system.time(VH2 <- Viterbihmm(obs.vec, BM1$tran_m, BM1$pi_mar, 'norm', list(mean = BM1$mean, BM1$sd)))
VH2
set.seed(1234)
n_states = 4
n_time = 200
x1 = list()
for (i in 1:n_states) {
x <- runif(n_states)
x1[[i]] <- x/sum(x)
}
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2,1/2,0,0,
0,1/2,1/2,0,
0,0,1/2,1/2,
1/2,0,0,1/2), ncol = n_states, byrow = T)
#
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
ini.vec = c(1, 0, 0, 0)
obs.vec1 = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec1[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
obs.states
tran.m.true
set.seed(1234)
n_states = 4
n_time = 200
x1 = list()
for (i in 1:n_states) {
x <- runif(n_states)
x1[[i]] <- x/sum(x)
}
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2,1/2,0,0,
0,1/2,1/2,0,
0,0,1/2,1/2,
1/2,0,0,1/2), ncol = n_states, byrow = T)
#
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
ini.vec = c(1, 0, 0, 0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
obs.states
tran.m.true
maxiter <- 500
N <- 4
Ti <- length(obs.vec)
epsilon <- 1e-5
pi.mar <- rep(1/N,N)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM1 <- BaumWelch_hmm(obs.vec, pi.mar, tran.m, mean.vec, sd.vec, maxiter, epsilon))
plot(BM1$iter_LL)
library(HiddenMarkov)
pi.mar <- rep(1/N,N)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM2 <- Baum.Welch(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec)))
plot(BM2$LL_iter)
BM1$tran_m
BM2$Pi
BM1$pi_mar
BM2$delta
BM1$mean
BM1$sd
BM2$pm
?Baum.Welch
View(forwardback.dthmm)
View(Baum.Welch)
View(Mstep.norm)
View(Estep)
View(forwardback.dthmm)
View(forwardback)
View(Mstep.norm)
View(Estep)
edit('Estep', editor = T)
trace('Estep', editor = T)
trace('Estep', edit = T)
system.time(BM2 <- Baum.Welch(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec)))
View(Baum.Welch)
View(Estep)
set.seed(1234)
n_states = 5
n_time = 200
x1 = list()
for (i in 1:n_states) {
x <- runif(n_states)
x1[[i]] <- x/sum(x)
}
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2, 1/2, 0, 0, 0, 1/3, 1/3, 1/3, 0, 0, 0, 1/3, 1/3, 1/3, 0, 0, 0, 1/3, 1/3, 1/3, 0, 0, 0, 1/2, 1/2), byrow=TRUE, nrow=5)
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
ini.vec = c(1, 0, 0, 0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
set.seed(1234)
n_states = 5
n_time = 200
x1 = list()
for (i in 1:n_states) {
x <- runif(n_states)
x1[[i]] <- x/sum(x)
}
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2, 1/2, 0, 0, 0,
1/3, 1/3, 1/3, 0, 0,
0, 1/3, 1/3, 1/3, 0,
0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 1/2, 1/2), byrow=TRUE, nrow=5)
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
ini.vec = c(1, 0, 0, 0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
set.seed(1234)
n_states = 5
n_time = 200
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2, 1/2, 0, 0, 0,
1/3, 1/3, 1/3, 0, 0,
0, 1/3, 1/3, 1/3, 0,
0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 1/2, 1/2), byrow=TRUE, nrow=5)
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
ini.vec = c(1, 0, 0, 0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
set.seed(1234)
n_states = 5
n_time = 200
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2, 1/2, 0, 0, 0,
1/3, 1/3, 1/3, 0, 0,
0, 1/3, 1/3, 1/3, 0,
0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 1/2, 1/2), byrow=TRUE, nrow=5)
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
ini.vec = c(1, 0, 0, 0,0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
listofnormals[[5]] = list(1, 'mean' = 10, 'sd' = 4 )
set.seed(1234)
n_states = 5
n_time = 200
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2, 1/2, 0, 0, 0,
1/3, 1/3, 1/3, 0, 0,
0, 1/3, 1/3, 1/3, 0,
0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 1/2, 1/2), byrow=TRUE, nrow=5)
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
listofnormals[[5]] = list(1, 'mean' = 10, 'sd' = 4 )
ini.vec = c(1, 0, 0, 0,0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
obs.states
tran.m.true
maxiter <- 500
N <- 4
Ti <- length(obs.vec)
epsilon <- 1e-5
pi.mar <- rep(1/N,N)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM1 <- BaumWelch_hmm(obs.vec, pi.mar, tran.m, mean.vec, sd.vec, maxiter, epsilon))
maxiter <- 500
N <- 4
Ti <- length(obs.vec)
epsilon <- 1e-5
pi.mar <- rep(1/N,N)
mean.vec <- c(2,3,9,10,12)
sd.vec <- c(1.5,2,3,4,2)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM1 <- BaumWelch_hmm(obs.vec, pi.mar, tran.m, mean.vec, sd.vec, maxiter, epsilon))
maxiter <- 500
N <- 5
Ti <- length(obs.vec)
epsilon <- 1e-5
pi.mar <- rep(1/N,N)
mean.vec <- c(2,3,9,10,12)
sd.vec <- c(1.5,2,3,4,2)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM1 <- BaumWelch_hmm(obs.vec, pi.mar, tran.m, mean.vec, sd.vec, maxiter, epsilon))
plot(BM1$iter_LL)
set.seed(1234)
n_states = 4
n_time = 200
x1 = list()
for (i in 1:n_states) {
x <- runif(n_states)
x1[[i]] <- x/sum(x)
}
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2,1/2,0,0,
0,1/2,1/2,0,
0,0,1/2,1/2,
1/2,0,0,1/2), ncol = n_states, byrow = T)
#
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
ini.vec = c(1, 0, 0, 0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
obs.states
tran.m.true
maxiter <- 500
N <- 4
Ti <- length(obs.vec)
epsilon <- 1e-5
pi.mar <- rep(1/N,N)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM1 <- BaumWelch_hmm(obs.vec, pi.mar, tran.m, mean.vec, sd.vec, maxiter, epsilon))
plot(BM1$iter_LL)
library(HiddenMarkov)
pi.mar <- rep(1/N,N)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM2 <- Baum.Welch(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec)))
plot(BM2$LL_iter)
maxiter <- 500
N <- 4
Ti <- length(obs.vec)
epsilon <- 1e-5
pi.mar <- rep(1/N,N)
mean.vec <- rev(c(2,3,9,10))
sd.vec <- rev(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM1 <- BaumWelch_hmm(obs.vec, pi.mar, tran.m, mean.vec, sd.vec, maxiter, epsilon))
plot(BM1$iter_LL)
library(HiddenMarkov)
pi.mar <- rep(1/N,N)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM2 <- Baum.Welch(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec)))
plot(BM2$LL_iter)
BM1$tran_m
BM2$Pi
BM1$pi_mar
BM2$delta
BM1$mean
BM1$sd
BM2$pm
library(HiddenMarkov)
pi.mar <- rep(1/N,N)
mean.vec <- rev(c(2,3,9,10))
sd.vec <- rev(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM2 <- Baum.Welch(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec)))
plot(BM2$LL_iter)
BM1$tran_m
BM2$Pi
BM1$pi_mar
BM2$delta
BM1$mean
BM1$sd
BM2$pm
maxiter <- 2000
N <- 4
Ti <- length(obs.vec)
epsilon <- 1e-5
pi.mar <- rep(1/N,N)
mean.vec <- rev(c(2,3,9,10))
sd.vec <- rev(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM1 <- BaumWelch_hmm(obs.vec, pi.mar, tran.m, mean.vec, sd.vec, maxiter, epsilon))
?Baum.Welch
library(HiddenMarkov)
pi.mar <- rep(1/N,N)
mean.vec <- rev(c(2,3,9,10))
sd.vec <- rev(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM2 <- Baum.Welch(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec)), maxiter = 2000)
library(HiddenMarkov)
pi.mar <- rep(1/N,N)
mean.vec <- rev(c(2,3,9,10))
sd.vec <- rev(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM2 <- Baum.Welch(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec),maxiter = 2000))
plot(BM2$LL_iter)
BM1$tran_m
BM2$Pi
BM1$pi_mar
BM2$delta
BM1$mean
BM1$sd
BM2$pm
set.seed(1234)
n_states = 4
n_time = 200
x1 = list()
for (i in 1:n_states) {
x <- runif(n_states)
x1[[i]] <- x/sum(x)
}
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2,1/2,0,0,0,
0,1/2,1/2,0,0,
0,0,1/2,1/2,0,
0,0,0,1/2,1/2,
0,0,0,0,1), ncol = n_states, byrow = T)
#
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 10, 'sd' = 2 )
ini.vec = c(1, 0, 0, 0,0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
set.seed(1234)
n_states = 5
n_time = 200
x1 = list()
for (i in 1:n_states) {
x <- runif(n_states)
x1[[i]] <- x/sum(x)
}
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2,1/2,0,0,0,
0,1/2,1/2,0,0,
0,0,1/2,1/2,0,
0,0,0,1/2,1/2,
0,0,0,0,1), ncol = n_states, byrow = T)
#
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 10, 'sd' = 2 )
ini.vec = c(1, 0, 0, 0,0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
set.seed(1234)
n_states = 5
n_time = 200
x1 = list()
for (i in 1:n_states) {
x <- runif(n_states)
x1[[i]] <- x/sum(x)
}
#tran.m.true <- matrix(unlist(x1), ncol = n_states, byrow = T)
#apply(tran.m, 1, sum)
tran.m.true <- matrix(c(1/2,1/2,0,0,0,
0,1/2,1/2,0,0,
0,0,1/2,1/2,0,
0,0,0,1/2,1/2,
0,0,0,0,1), ncol = n_states, byrow = T)
#
listofnormals = list()
listofnormals[[1]] = list(1, 'mean' = 2, 'sd' = 1 )
listofnormals[[2]] = list(1, 'mean' = 4, 'sd' = 3 )
listofnormals[[3]] = list(1, 'mean' = 8, 'sd' = 3 )
listofnormals[[4]] = list(1, 'mean' = 14, 'sd' = 3 )
listofnormals[[5]] = list(1, 'mean' = 10, 'sd' = 2 )
ini.vec = c(1, 0, 0, 0,0)
obs.vec = rep(NA, n_time)
obs.states = rep(NA, n_time)
for (i in 1:n_time) {
x <- sample(1:n_states, 1, prob = ini.vec)
obs.states[i] <- x
obs.vec[i] = do.call(rnorm, listofnormals[[x]])
ini.vec <- ini.vec %*% tran.m.true
}
obs.states
tran.m.true
maxiter <- 2000
N <- 4
Ti <- length(obs.vec)
epsilon <- 1e-5
pi.mar <- rep(1/N,N)
mean.vec <- rev(c(2,3,9,10))
sd.vec <- rev(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM1 <- BaumWelch_hmm(obs.vec, pi.mar, tran.m, mean.vec, sd.vec, maxiter, epsilon))
plot(BM1$iter_LL)
library(HiddenMarkov)
pi.mar <- rep(1/N,N)
mean.vec <- rev(c(2,3,9,10))
sd.vec <- rev(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
system.time(BM2 <- Baum.Welch(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec),maxiter = 2000))
BM1$tran_m
BM2$Pi
BM1$pi_mar
BM2$delta
BM1$mean
BM1$sd
BM2$pm
x = data.frame(y = c(1,2), s = c(1,2))
x
str(x)
x[,1]
a = x[,1]
str(x)
str(a)
x = data.frame(y = c(1,2), s = c(1,2), f = c(2,3))
a = x[,c(1,2)]
str(a)
plot(cars)
