epsilon <- 1e-6
pi.mar <- as.double(rep(1/N,N))
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- as.double(c(2,3,9,10))
sd.vec <- as.double(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
density.m <- matrix(rep(as.double(0), Ti*N), nrow = Ti, ncol = N)
for (i in 1:Ti){
density.m[i,] <- mapply(
dnorm, 'x' = obs.vec[i], 'mean' = mean.vec, 'sd' = sd.vec, SIMPLIFY = T)
}
FB <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
LL <- FB$Loglikelihood
log.lik.iter <- c(log.lik.iter, LL)
diff <- LL - oldLL
cat('iter=', iter, '\n')
cat('LL=', round(LL, 10), '\n')
cat('diff=', diff, '\n')
if(abs(diff)<epsilon){
stop('Algorithm converges!')
}
gamma.log <- FB$alphalog+FB$betalog-LL
gamma.m <- exp(gamma.log)
alpha.hat <- FB$alpha_hat
beta.hat <- FB$beta_hat
mean.vec <- apply(gamma.m, 2, function(x) sum(x*obs.vec)/sum(x))
sd.vec <- sqrt(apply((matrix(obs.vec, nrow = Ti, ncol = N) - matrix(mean.vec,nrow = Ti, ncol = N, byrow = TRUE))^2 * gamma.m, MARGIN = 2,FUN = sum)/apply(gamma.m, MARGIN = 2, FUN = sum))
pi.mar <- gamma.m[1,]
tran.m <- (t(alpha.hat[1:Ti-1,])%*%(density.m[2:Ti,]*beta.hat[2:Ti,]))*tran.m #maybe a parenthesis is redundant.
tran.m <- t(scale(t(tran.m),center = F, scale = colSums(t(tran.m))))
oldLL <- LL
mean.vec
sd.vec
pi.mar
tran.m
mean.vec
sd.vec
pi.mar
tran.m
result2 = forwardback(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec))
head(result2$logalpha)
head(result2$logbeta)
head(result2$LL)
FB2 <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
head(FB2$alphalog)
head(FB2$betalog)
FB2$Loglikelihood
iter = 1
N <- 4
Ti <- length(obs.vec)
maxiter <- 500
epsilon <- 1e-6
pi.mar <- as.double(rep(1/N,N))
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- as.double(c(2,3,9,10))
sd.vec <- as.double(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
density.m <- matrix(rep(as.double(0), Ti*N), nrow = Ti, ncol = N)
for (i in 1:Ti){
density.m[i,] <- mapply(
dnorm, 'x' = obs.vec[i], 'mean' = mean.vec, 'sd' = sd.vec, SIMPLIFY = T)
}
FB <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
LL <- FB$Loglikelihood
log.lik.iter <- c(log.lik.iter, LL)
diff <- LL - oldLL
cat('iter=', iter, '\n')
cat('LL=', round(LL, 10), '\n')
cat('diff=', diff, '\n')
if(abs(diff)<epsilon){
stop('Algorithm converges!')
}
gamma.log <- FB$alphalog+FB$betalog-LL
gamma.m <- exp(gamma.log)
alpha.hat <- FB$alpha_hat
beta.hat <- FB$beta_hat
mean.vec <- apply(gamma.m, 2, function(x) sum(x*obs.vec)/sum(x))
sd.vec <- sqrt(apply((matrix(obs.vec, nrow = Ti, ncol = N) - matrix(mean.vec,nrow = Ti, ncol = N, byrow = TRUE))^2 * gamma.m, MARGIN = 2,FUN = sum)/apply(gamma.m, MARGIN = 2, FUN = sum))
pi.mar <- gamma.m[1,]
tran.m <- (t(alpha.hat[1:Ti-1,])%*%(density.m[2:Ti,]*beta.hat[2:Ti,]))*tran.m #maybe a parenthesis is redundant.
tran.m <- as.matrix(t(scale(t(tran.m),center = F, scale = colSums(t(tran.m)))))
oldLL <- LL
mean.vec
sd.vec
pi.mar
tran.m
iter = 1
N <- 4
Ti <- length(obs.vec)
maxiter <- 500
epsilon <- 1e-6
pi.mar <- as.double(rep(1/N,N))
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- as.double(c(2,3,9,10))
sd.vec <- as.double(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
density.m <- matrix(rep(as.double(0), Ti*N), nrow = Ti, ncol = N)
for (i in 1:Ti){
density.m[i,] <- mapply(
dnorm, 'x' = obs.vec[i], 'mean' = mean.vec, 'sd' = sd.vec, SIMPLIFY = T)
}
FB <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
LL <- FB$Loglikelihood
log.lik.iter <- c(log.lik.iter, LL)
diff <- LL - oldLL
cat('iter=', iter, '\n')
cat('LL=', round(LL, 10), '\n')
cat('diff=', diff, '\n')
if(abs(diff)<epsilon){
stop('Algorithm converges!')
}
gamma.log <- FB$alphalog+FB$betalog-LL
gamma.m <- exp(gamma.log)
alpha.hat <- FB$alpha_hat
beta.hat <- FB$beta_hat
mean.vec <- apply(gamma.m, 2, function(x) sum(x*obs.vec)/sum(x))
sd.vec <- sqrt(apply((matrix(obs.vec, nrow = Ti, ncol = N) - matrix(mean.vec,nrow = Ti, ncol = N, byrow = TRUE))^2 * gamma.m, MARGIN = 2,FUN = sum)/apply(gamma.m, MARGIN = 2, FUN = sum))
pi.mar <- gamma.m[1,]
tran.m <- (t(alpha.hat[1:Ti-1,])%*%(density.m[2:Ti,]*beta.hat[2:Ti,]))*tran.m #maybe a parenthesis is redundant.
tran.m <- t(scale(t(tran.m),center = F, scale = colSums(t(tran.m))))
tran.m <- t(apply(tran.m, 1, function(x) x/sum(x)))
oldLL <- LL
mean.vec
sd.vec
pi.mar
tran.m
FB2 <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
head(FB2$alphalog)
head(FB2$betalog)
FB2$Loglikelihood
result2 = forwardback(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec))
head(result2$logalpha)
head(result2$logbeta)
head(result2$LL)
FB2 <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
head(FB2$alphalog)
head(FB2$betalog)
FB2$Loglikelihood
density.m <- matrix(rep(as.double(0), Ti*N), nrow = Ti, ncol = N)
for (i in 1:Ti){
density.m[i,] <- mapply(
dnorm, 'x' = obs.vec[i], 'mean' = mean.vec, 'sd' = sd.vec, SIMPLIFY = T)
}
FB2 <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
head(FB2$alphalog)
head(FB2$betalog)
FB2$Loglikelihood
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB.R', echo=TRUE)
iter = 1
N <- 4
Ti <- length(obs.vec)
maxiter <- 500
epsilon <- 1e-6
pi.mar <- as.double(rep(1/N,N))
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- as.double(c(2,3,9,10))
sd.vec <- as.double(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
density.m <- matrix(rep(as.double(0), Ti*N), nrow = Ti, ncol = N)
for (i in 1:Ti){
density.m[i,] <- mapply(
dnorm, 'x' = obs.vec[i], 'mean' = mean.vec, 'sd' = sd.vec, SIMPLIFY = T)
}
FB <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
LL <- FB$Loglikelihood
log.lik.iter <- c(log.lik.iter, LL)
diff <- LL - oldLL
cat('iter=', iter, '\n')
cat('LL=', round(LL, 10), '\n')
cat('diff=', diff, '\n')
if(abs(diff)<epsilon){
stop('Algorithm converges!')
}
gamma.log <- FB$alphalog+FB$betalog-LL
gamma.m <- exp(gamma.log)
alpha.hat <- FB$alpha_hat
beta.hat <- FB$beta_hat
mean.vec <- apply(gamma.m, 2, function(x) sum(x*obs.vec)/sum(x))
sd.vec <- sqrt(apply((matrix(obs.vec, nrow = Ti, ncol = N) - matrix(mean.vec,nrow = Ti, ncol = N, byrow = TRUE))^2 * gamma.m, MARGIN = 2,FUN = sum)/apply(gamma.m, MARGIN = 2, FUN = sum))
pi.mar <- gamma.m[1,]
tran.m <- (t(alpha.hat[1:Ti-1,])%*%(density.m[2:Ti,]*beta.hat[2:Ti,]))*tran.m #maybe a parenthesis is redundant.
iter = 1
N <- 4
Ti <- length(obs.vec)
maxiter <- 500
epsilon <- 1e-6
pi.mar <- as.double(rep(1/N,N))
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- as.double(c(2,3,9,10))
sd.vec <- as.double(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
FB <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
LL <- FB$Loglikelihood
log.lik.iter <- c(log.lik.iter, LL)
diff <- LL - oldLL
cat('iter=', iter, '\n')
cat('LL=', round(LL, 10), '\n')
cat('diff=', diff, '\n')
if(abs(diff)<epsilon){
stop('Algorithm converges!')
}
gamma.log <- FB$alphalog+FB$betalog-LL
gamma.m <- exp(gamma.log)
AH <- FB$alphahat
BH <- FB$betahat
DM <- FB$density_m
mean.vec <- apply(gamma.m, 2, function(x) sum(x*obs.vec)/sum(x))
sd.vec <- sqrt(apply((matrix(obs.vec, nrow = Ti, ncol = N) - matrix(mean.vec,nrow = Ti, ncol = N, byrow = TRUE))^2 * gamma.m, MARGIN = 2,FUN = sum)/apply(gamma.m, MARGIN = 2, FUN = sum))
pi.mar <- gamma.m[1,]
tran.m <- (t(AH[1:Ti-1,])%*%(DM[2:Ti,]*BH[2:Ti,]))*tran.m #maybe a parenthesis is redundant.
#tran.m <- t(scale(t(tran.m),center = F, scale = colSums(t(tran.m))))
tran.m <- t(apply(tran.m, 1, function(x) x/sum(x)))
oldLL <- LL
head(FB$alphalog)
head(FB$betalog)
FB$Loglikelihood
head(FB$alphalog+FB$betalog-FB$Loglikelihood)
mean.vec
sd.vec
pi.mar
tran.m
result2 = forwardback(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec))
head(result2$logalpha)
head(result2$logbeta)
head(result2$LL)
FB2 <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
head(FB2$alphalog)
head(FB2$betalog)
FB2$Loglikelihood
FB2 <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
head(FB2$alphalog)
head(FB2$betalog)
FB2$Loglikelihood
head(FB2$density_m)
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB.R', echo=TRUE)
FB2 <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
head(FB2$alphalog)
head(FB2$betalog)
FB2$Loglikelihood
head(FB2$density_m)
class(HiddenMarkov())
class(package:HiddenMarkov())
search()
class(package:HiddenMarkov)
HiddenMarkov::makedensity
trace('HiddenMarkov', edit = T)
trace('forwardback', edit = T)
result2 = forwardback(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec))
head(result2$logalpha)
head(result2$logbeta)
head(result2$LL)
result2 = forwardback(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec))
head(result2$logalpha)
head(result2$logbeta)
head(result2$LL)
result2$tra
result2 = forwardback(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec))
head(result2$logalpha)
head(result2$logbeta)
head(result2$LL)
result2$tra
result2$tran
result2 = forwardback(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec))
head(result2$logalpha)
head(result2$logbeta)
head(result2$LL)
result2$tra
result2$tran - FB2$density_m
trace('forwardback', edit = T)
result2 = forwardback(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec))
head(result2$logalpha)
head(result2$logbeta)
head(result2$LL)
result2$tra
result2$tran - FB2$density_m
trace('forwardback', edit = T)
result2 = forwardback(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec))
head(result2$logalpha)
head(result2$logbeta)
head(result2$LL)
result2$tra
result2$tran - FB2$density_m
trace('forwardback', edit = T)
result2 = forwardback(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec), fortran = F)
head(result2$logalpha)
head(result2$logbeta)
head(result2$LL)
result2$tra
result2$tran - FB2$density_m
trace('forwardback', edit = T)
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB.R', echo=TRUE)
result2 = forwardback(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec), fortran = F)
head(result2$logalpha)
head(result2$logbeta)
head(result2$LL)
result2$tra
result2$tran - FB2$density_m
FB2 <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB.R', echo=TRUE)
head(FB2$betalog)
FB2 <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
head(FB2$alphalog)
head(FB2$betalog)
FB2$Loglikelihood
head(FB2$density_m)
FB2 <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
head(FB2$alphalog)
head(FB2$betalog)
FB2$Loglikelihood
head(FB2$density_m)
FB2$ct
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB.R', echo=TRUE)
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB.R', echo=TRUE)
FB2 <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
head(FB2$alphalog)
head(FB2$betalog)
FB2$Loglikelihood
head(FB2$density_m)
FB2$ct
N <- 4
Ti <- length(obs.vec)
maxiter <- 500
epsilon <- 1e-6
pi.mar <- as.double(rep(1/N,N))
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- as.double(c(2,3,9,10))
sd.vec <- as.double(c(1.5,2,3,4))
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
for (iter in 1:maxiter){
FB <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
LL <- FB$Loglikelihood
log.lik.iter <- c(log.lik.iter, LL)
diff <- LL - oldLL
cat('iter=', iter, '\n')
cat('LL=', round(LL, 10), '\n')
cat('diff=', diff, '\n')
#if(diff<0){
#  stop('loglikelihood is no better than last iteration!')
#}
if(abs(diff)<epsilon){
stop('Algorithm converges!')
}
gamma.log <- FB$alphalog+FB$betalog-LL
gamma.m <- exp(gamma.log)
alpha.hat <- FB$alpha_hat
beta.hat <- FB$beta_hat
mean.vec <- apply(gamma.m, 2, function(x) sum(x*obs.vec)/sum(x))
sd.vec <- sqrt(apply((matrix(obs.vec, nrow = Ti, ncol = N) - matrix(mean.vec,nrow = Ti, ncol = N, byrow = TRUE))^2 * gamma.m, MARGIN = 2,FUN = sum)/apply(gamma.m, MARGIN = 2, FUN = sum))
pi.mar <- as.double(gamma.m[1,])
tran.m <- (t(alpha.hat[1:Ti-1,])%*%(density.m[2:Ti,]*beta.hat[2:Ti,]))*tran.m #maybe a parenthesis is redundant.
tran.m <- t(scale(t(tran.m),center = F, scale = colSums(t(tran.m))))
oldLL <- LL
}
source('~/My/math/STAT/Courses/AMS 597/597_Project/FB.R', echo=TRUE)
source('~/My/math/STAT/Courses/AMS 597/597_Project/re-estimation-lambda2.R', echo=TRUE)
maxiter <- 500
N <- 4
Ti <- length(obs.vec)
epsilon <- 1e-6
pi.mar <- rep(1/N,N)
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
for (iter in 1:maxiter){
FB <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
LL <- FB$Loglikelihood
log.lik.iter <- c(log.lik.iter, LL)
diff <- LL - oldLL
cat('iter=', iter, '\n')
cat('LL=', round(LL, 10), '\n')
cat('diff=', diff, '\n')
if(abs(diff)<epsilon){
stop('Algorithm converges!')
}
gamma.log <- FB$alphalog+FB$betalog-LL
gamma.m <- exp(gamma.log)
AH <- FB$alphahat
BH <- FB$betahat
DM <- FB$density_m
mean.vec <- apply(gamma.m, 2, function(x) sum(x*obs.vec)/sum(x))
sd.vec <- sqrt(apply((matrix(obs.vec, nrow = Ti, ncol = N) - matrix(mean.vec,nrow = Ti, ncol = N, byrow = TRUE))^2 * gamma.m, MARGIN = 2,FUN = sum)/apply(gamma.m, MARGIN = 2, FUN = sum))
pi.mar <- gamma.m[1,]
tran.m <- (t(AH[1:Ti-1,])%*%(DM[2:Ti,]*BH[2:Ti,]))*tran.m #maybe a parenthesis is redundant.
tran.m <- t(scale(t(tran.m),center = F, scale = colSums(t(tran.m))))
oldLL <- LL
}
maxiter <- 24
N <- 4
Ti <- length(obs.vec)
epsilon <- 1e-6
pi.mar <- rep(1/N,N)
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
for (iter in 1:maxiter){
FB <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
LL <- FB$Loglikelihood
log.lik.iter <- c(log.lik.iter, LL)
diff <- LL - oldLL
cat('iter=', iter, '\n')
cat('LL=', round(LL, 10), '\n')
cat('diff=', diff, '\n')
if(abs(diff)<epsilon){
stop('Algorithm converges!')
}
gamma.log <- FB$alphalog+FB$betalog-LL
gamma.m <- exp(gamma.log)
AH <- FB$alphahat
BH <- FB$betahat
DM <- FB$density_m
mean.vec <- apply(gamma.m, 2, function(x) sum(x*obs.vec)/sum(x))
sd.vec <- sqrt(apply((matrix(obs.vec, nrow = Ti, ncol = N) - matrix(mean.vec,nrow = Ti, ncol = N, byrow = TRUE))^2 * gamma.m, MARGIN = 2,FUN = sum)/apply(gamma.m, MARGIN = 2, FUN = sum))
pi.mar <- gamma.m[1,]
tran.m <- (t(AH[1:Ti-1,])%*%(DM[2:Ti,]*BH[2:Ti,]))*tran.m #maybe a parenthesis is redundant.
tran.m <- t(scale(t(tran.m),center = F, scale = colSums(t(tran.m))))
oldLL <- LL
}
mean.vec
mean.vec
sd.vec
mean.vec
sd.vec
tran.m
mean.vec
sd.vec
tran.m
pi.mar
?Baum.Welch
pi.mar <- rep(1/N,N)
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
Baum.Welch(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec))
source('~/My/math/STAT/Courses/AMS 597/597_Project/re-estimation-lambda2.R', echo=TRUE)
source('~/My/math/STAT/Courses/AMS 597/597_Project/re-estimation-lambda2.R', echo=TRUE)
source('~/My/math/STAT/Courses/AMS 597/597_Project/re-estimation-lambda2.R', echo=TRUE)
source('~/My/math/STAT/Courses/AMS 597/597_Project/re-estimation-lambda2.R', echo=TRUE)
plot(log.lik.iter)
sd.vec
x <- c(1,2,3,4,5)
matrix(x, byrow = T, nrow = 10, ncol = length(x))
result2 = forwardback(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec), fortran = F)
library(HiddenMarkov)
esult2 = forwardback(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec), fortran = F)
head(result2$logalpha)
head(result2$logbeta)
head(result2$LL)
result2$tra
result2$tran - FB2$density_m
View(forwardback)
pi.mar <- rep(1/N,N)
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
Baum.Welch(obs.vec, tran.m, pi.mar, 'norm', list(mean = mean.vec, sd = sd.vec))
trace('forwardback', edit = T)
View(forwardback)
View(Mstep.norm)
maxiter <- 24
N <- 4
Ti <- length(obs.vec)
epsilon <- 1e-6
pi.mar <- rep(1/N,N)
oldLL <- -Inf
log.lik.iter <- c(-Inf)
mean.vec <- c(2,3,9,10)
sd.vec <- c(1.5,2,3,4)
tran.m <- matrix(as.double(rep(1/N, N*N)), ncol = N, byrow = T)
for (iter in 1:maxiter){
FB <- ForwardBack(obs.vec, pi.mar, tran.m, mean.vec, sd.vec)
LL <- FB$Loglikelihood
log.lik.iter <- c(log.lik.iter, LL)
diff <- LL - oldLL
cat('iter=', iter, '\n')
cat('LL=', round(LL, 10), '\n')
cat('diff=', diff, '\n')
if(abs(diff)<epsilon){
stop('Algorithm converges!')
}
gamma.log <- FB$alphalog+FB$betalog-LL
gamma.m <- exp(gamma.log)
AH <- FB$alphahat
BH <- FB$betahat
DM <- FB$density_m
mean.vec <- apply(gamma.m, 2, function(x) sum(x*obs.vec)/sum(x))
sd.vec <- sqrt(apply((matrix(obs.vec, nrow = Ti, ncol = N) - matrix(mean.vec,nrow = Ti, ncol = N, byrow = TRUE))^2 * gamma.m, MARGIN = 2,FUN = sum)/apply(gamma.m, MARGIN = 2, FUN = sum))
pi.mar <- gamma.m[1,]
tran.m <- (t(AH[1:Ti-1,])%*%(DM[2:Ti,]*BH[2:Ti,]))*tran.m #maybe a parenthesis is redundant.
tran.m <- t(scale(t(tran.m),center = F, scale = colSums(t(tran.m))))
oldLL <- LL
}
mean.vec
sd.vec
tran.m
pi.mar
View(Estep)
View(Baum.Welch)
View(forwardback)
